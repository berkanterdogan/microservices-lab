logging:
  level:
    com.berkanterdogan.microservices.lab: ${LOGGING_LEVEL_COM_BERKANTERDOGAN_MICROSERVICES_LAB:debug}
    root: ${LOGGING_LEVEL_ROOT:debug}
twitter-to-kafka-service:
  welcome-message: Welcome To TwitterToKafkaServiceApplication!
  mock-tweets-config:
    enabled: ${MOCK_ENABLED:true}
    min-tweet-length: 5
    max-tweet-length: 15
    sleep-ms: 10000
  twitter4j-config:
    enabled: ${TWITTER4J_ENABLED:false}
    debug: ${TWITTER4J_DEBUG:false}
    oauth:
      consumer-key: ${TWITTER4J_OAUTH_CONSUMER_KEY}
      consumer-secret: ${TWITTER4J_OAUTH_CONSUMER_SECRET}
      access-token: ${TWITTER4J_OAUTH_ACCESS_TOKEN}
      access-token-secret: ${TWITTER4J_OAUTH_ACCESS_TOKEN_SECRET}
  tweet-keywords:
    - Java
    - Microservices
    - Spring
    - Kafka
    - Elasticsearch

retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 10000
  multiplier: 2.0
  max-attempts: 5
  sleep-time-ms: 2000

kafka-config:
  bootstrap-servers: ${KAFKA_CONFIG_BOOTSTRAP_SERVERS:localhost:19092, localhost:29092, localhost:39092}
  schema-registry-url-key: schema.registry.url
  schema-registry-url: ${KAFKA_CONFIG_SCHEMA_REGISTRY_URL:http://localhost:8081}
  topic-name: ${KAFKA_CONFIG_TOPIC_NAME:twitter-topic}
  topic-names-to-create:
    - twitter-topic
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.LongSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5
